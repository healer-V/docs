import{_ as s,c as i,a3 as a,o as e}from"./chunks/framework.CDeai9Ig.js";const y=JSON.parse('{"title":"TypeScript 核心基础知识梳理","description":"","frontmatter":{},"headers":[],"relativePath":"articles/basic/typescript.md","filePath":"articles/basic/typescript.md","lastUpdated":1726112647000}'),l={name:"articles/basic/typescript.md"};function n(h,t,r,d,k,p){return e(),i("div",null,t[0]||(t[0]=[a(`<h1 id="typescript-核心基础知识梳理" tabindex="-1">TypeScript 核心基础知识梳理 <a class="header-anchor" href="#typescript-核心基础知识梳理" aria-label="Permalink to &quot;TypeScript 核心基础知识梳理&quot;">​</a></h1><blockquote><p>认识 TypeScript</p><p>TypeScript 是 JavaScript 的一个超集，强类型的定义。</p><ul><li>1、规范我们的代码</li><li>2、代码编译阶段就能及时发现错误</li><li>3、在原生 js 的基础上加上了一层类型定义</li></ul><p>注意：TypeScript 无法在浏览器中运行。需要借助编译器，将 TS 转为 JS。</p></blockquote><h2 id="_1、typescript-开发环境" tabindex="-1">1、TypeScript 开发环境 <a class="header-anchor" href="#_1、typescript-开发环境" aria-label="Permalink to &quot;1、TypeScript 开发环境&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">TypeScript 官方地址</td><td style="text-align:left;"><a href="https://www.typescriptlang.org/" target="_blank" rel="noreferrer">https://www.typescriptlang.org/</a></td></tr><tr><td style="text-align:left;">开发环境 node.js</td><td style="text-align:left;">搭建代码的运行环境（在官网下载傻瓜式安装即可）</td></tr><tr><td style="text-align:left;">node 指令</td><td style="text-align:left;"><code>node -v</code> 查看 node 版本；可以用来检查 node 是否安装成功，如果显示出版本号，则说明安装成功了。</td></tr><tr><td style="text-align:left;">TypeScript 环境</td><td style="text-align:left;"><code>npm install -g typescript</code> 全局安装 TypeScript 编译器</td></tr><tr><td style="text-align:left;">TypeScript 指令</td><td style="text-align:left;"><code>tsc -v</code>查看 TypeScript 版本； 可以用来检查 ts 是否安装成功，如果显示出版本号，则说明安装成功了。</td></tr><tr><td style="text-align:left;">开发工具</td><td style="text-align:left;">vscode 支持 TypeScript 的代码编辑器</td></tr><tr><td style="text-align:left;">创建 ts 文件</td><td style="text-align:left;">文件名 <code>.ts</code> 以后缀<code>.ts</code>结尾表示 TypeScript 文件格式。例如：<code>main.ts</code></td></tr><tr><td style="text-align:left;">编译 ts 文件</td><td style="text-align:left;"><code>tsc xxx.ts</code> 将 ts 文件编译成 js 文件，会出现 main.js 文件。 例如：<code>tsc main.js</code> 编译后会生成 main.js 文件</td></tr><tr><td style="text-align:left;">执行 js 文件</td><td style="text-align:left;"><code>node xxx.js</code> 通过 node 执行 js 文件。例如：<code>node main.js</code>，执行 main.js 文件</td></tr></tbody></table><h2 id="_2、typescript-工作流" tabindex="-1">2、TypeScript 工作流 <a class="header-anchor" href="#_2、typescript-工作流" aria-label="Permalink to &quot;2、TypeScript 工作流&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">工作流</td><td style="text-align:left;">写好 ts 代码后，通过 TypeScript 编译器编译为 js，然后再使用 js</td></tr><tr><td style="text-align:left;">初始化项目</td><td style="text-align:left;"><code>npm init;</code> npm 管理项目，npm init 执行后， 可以一直回车，使用默认选项， 结束后生成 package.json 文件</td></tr><tr><td style="text-align:left;">安装插件</td><td style="text-align:left;"><code>npm install --save-dev lite-server；</code> lite-server 用于开发环境的轻量级服务器。 此服务器可以根据项目根目录下 index.js 文件自动部署在 localhost:3000 上，当编译完成以后会自动刷新页面。</td></tr><tr><td style="text-align:left;">依赖安装位置</td><td style="text-align:left;">devDependencies：依赖只参与项目开发，上线不需要打包到生产环境中; dependencies：依赖参与项目开发，也会打包到生产环境中</td></tr></tbody></table><h2 id="_3、定义变量-常量" tabindex="-1">3、定义变量/常量 <a class="header-anchor" href="#_3、定义变量-常量" aria-label="Permalink to &quot;3、定义变量/常量&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">let，const，var</td><td style="text-align:left;">const：声明常量 let：声明变量，解决 var 带来的作用域困难的问题 var：声明变量</td></tr></tbody></table><h2 id="_4、typescript-基本类型" tabindex="-1">4、TypeScript 基本类型 <a class="header-anchor" href="#_4、typescript-基本类型" aria-label="Permalink to &quot;4、TypeScript 基本类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">number</td><td style="text-align:left;"><strong>数字类型：</strong> ① 可以表示整数，浮点数以及正负数 ② 写法：let num:number=1；</td></tr><tr><td style="text-align:left;">string</td><td style="text-align:left;"><strong>字符串类型：</strong> ① 可以用单引号，双引号，以及反引号表示字符串 ② 写法: <code>let str:string=&#39;cuihua&#39;</code></td></tr><tr><td style="text-align:left;">boolean</td><td style="text-align:left;"><strong>布尔类型：</strong> <code>true，false</code> <strong>写法：</strong> <code>let isTrue=true;</code> <strong>会自动映射类型</strong> <code>let b:boolean=false;</code> <strong>手动映射类型</strong></td></tr><tr><td style="text-align:left;">Enum</td><td style="text-align:left;"><strong>枚举类型：</strong> ① 写法： enum Color{red,green,blue}; let color = Color.blue ; console.log(color); 结果是索引 2 ② 自定义数字顺序： enum Color{red=5,green,blue}; ③ 或者是不用数字： enum Color{red=&#39;red&#39;,green,blue};</td></tr><tr><td style="text-align:left;">any</td><td style="text-align:left;"><strong>任意类型：</strong> ① 不知道是什么类型的时候，可以用 any ② 写法： let randomValue :any = 666; 可以修改为任意类型</td></tr><tr><td style="text-align:left;">unkown</td><td style="text-align:left;"><strong>未知类型：</strong> ① 不保证类型，但是能保证类型安全 ② 写法： let randomValue:unkown =666</td></tr><tr><td style="text-align:left;">void</td><td style="text-align:left;">不存在：函数在没有返回值的时候，为 void 类型 function fn() : void {}</td></tr><tr><td style="text-align:left;">undefined</td><td style="text-align:left;">存在，但是没有值： function fn():undefined {return;} 返回值空值</td></tr><tr><td style="text-align:left;">never</td><td style="text-align:left;">不能停止，never 类型：例如一个函数永远执行不完 function fn(a:string):never{throw{message}} 函数中抛出异常 while 循环（执行不完的代码）</td></tr></tbody></table><h3 id="array-数组" tabindex="-1">Array 数组 <a class="header-anchor" href="#array-数组" aria-label="Permalink to &quot;Array 数组&quot;">​</a></h3><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ①  []</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ②  数组中可以存放任意类型的数据</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> b</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> boolean</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// ③  js中数组的宽容度非常大，而ts也继承了这一点</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 写法：</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">number</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt; </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> list5</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;4&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 存放任何类型的数据</span></span></code></pre></div><h2 id="_5、高级类型" tabindex="-1">5、高级类型 <a class="header-anchor" href="#_5、高级类型" aria-label="Permalink to &quot;5、高级类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">union</td><td style="text-align:left;">联合类型： 写法： let union:string | number （定义多种类型，中间用|隔开） let union1: 0 | 1 | 2 （固定取值类型）</td></tr><tr><td style="text-align:left;">literal</td><td style="text-align:left;">预定义（字面量）类型：写法：let literal: 1| &#39;2&#39; | true | [1,2,3,4]</td></tr><tr><td style="text-align:left;">nullable</td><td style="text-align:left;">可控类型</td></tr></tbody></table><h2 id="_6、类型适配-类型断言" tabindex="-1">6、类型适配（类型断言） <a class="header-anchor" href="#_6、类型适配-类型断言" aria-label="Permalink to &quot;6、类型适配（类型断言）&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Type Assertions</td><td style="text-align:left;">① 通知 typescript 进行类型适配的过程就叫做类型断言 ② 写法： let message: any; message = &#39;jack&#39;; message.endsWith(&#39;k&#39;) (1) 方式 <code>let ddd = (&lt;string&gt;message).endsWith(&quot;k&quot;)</code> (2) 方式 let dd2 = (message as string).endsWith(&quot;k&quot;) 注释：message 初始 any 类型，即使赋值为字符串，也是 any 类型，无法使用编辑器内置的联想功能，给出字符串相关的属性和方法提示信息。所以需要进行类型适配(<code>&lt;string&gt;message</code>)或者(message as string)</td></tr></tbody></table><h2 id="_7、函数类型" tabindex="-1">7、函数类型 <a class="header-anchor" href="#_7、函数类型" aria-label="Permalink to &quot;7、函数类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">function</td><td style="text-align:left;">① 基本用法与 es6 一样 ② 参数绑定类型 let log = (message: string) =&gt; console.log(message) log(&#39;jack&#39;) ③ 使用?可以省略参数，不传值默认为 undefined let log = (message: string, code?: number) =&gt; console.log(message) log(&#39;jack&#39;) ④ 设置参数默认值 let log = (message: string, code: number = 0) =&gt; console.log(message) log(&#39;jack&#39;) 注意：不管是可选参数，还是默认参数，都必须在参数列表末尾，按照从后往前的顺序进行排列</td></tr></tbody></table><h2 id="_8、对象类型" tabindex="-1">8、对象类型 <a class="header-anchor" href="#_8、对象类型" aria-label="Permalink to &quot;8、对象类型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">object</td><td style="text-align:left;"><strong>对象类型：</strong> ① key to type 键类型对。编辑器会自动匹配类型，或者手动进行类型匹配 ② 不能使用 object 来笼统定义{}，调用的时候会报错 ③ object 类型可以认为是 any 类型的一个子集</td></tr></tbody></table><h2 id="_9、接口" tabindex="-1">9、接口 <a class="header-anchor" href="#_9、接口" aria-label="Permalink to &quot;9、接口&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">interface</td><td style="text-align:left;"><strong>接口：高内聚，低耦合</strong> ① 功能相关的事务放在一个集合中形成一个模块，模块之间应该是相互独立的，保持低耦合的状态 ② 使用方式：给函数参数定义接口类型 interface Point { x: number, y: number } let drawPoint = (point: Point) =&gt; { console.log({ x: point.x, y: point.y }) } drawPoint({ x: 23, y: 34 }) 把所有相关联的属性和方法放在一个集合中</td></tr></tbody></table><h2 id="_10、类" tabindex="-1">10、类 <a class="header-anchor" href="#_10、类" aria-label="Permalink to &quot;10、类&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">class</td><td style="text-align:left;">使用 class 关键字定义的称之为类。可以使用 implements 关键字，通过类来实现某个接口 interface ① 写法： interface xx{} class x implements xx{} ② js 中构造函数不能重载，一个类有且仅有一个 constructor。如果实例化的时候不知道传入的值，可以使用?(可选项)，或者赋值默认值 ③ 访问修饰符（public，private，protected），在声明构造函数的同时，顺便完成成员变量的声明以及初始化</td></tr></tbody></table><h2 id="_11、访问修饰符" tabindex="-1">11、访问修饰符 <a class="header-anchor" href="#_11、访问修饰符" aria-label="Permalink to &quot;11、访问修饰符&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">public</td><td style="text-align:left;">公有的（属性和方法默认是公有的）</td></tr><tr><td style="text-align:left;">private</td><td style="text-align:left;">私有的 ① 私有变量一般以下划线开头来表示，例如： _x ② set 和 get 处理私有变量（编译器版本需要在 es5 以上）<code>tsc -t es5 xx.ts</code></td></tr><tr><td style="text-align:left;">protected</td><td style="text-align:left;">保护的</td></tr></tbody></table><h2 id="_12、模块" tabindex="-1">12、模块 <a class="header-anchor" href="#_12、模块" aria-label="Permalink to &quot;12、模块&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">module</td><td style="text-align:left;">① 一个文件可以理解为一个模块 ② 与 es6 中的 module 相似，有两种导入导出方式。模块内的代码需要 export 导出，然后其他文件中使用 import 导入</td></tr></tbody></table><h2 id="_13、泛型" tabindex="-1">13、泛型 <a class="header-anchor" href="#_13、泛型" aria-label="Permalink to &quot;13、泛型&quot;">​</a></h2><table tabindex="0"><thead><tr><th style="text-align:left;">名称</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">Generics</td><td style="text-align:left;">① 类型+&lt;&gt; 泛型 ② 多泛型</td></tr></tbody></table><div class="language-tsx vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 具体写法</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lastInArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Array</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 或者</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lastInArray</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">arr</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> arr[arr.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">length</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">};</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> l1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lastInArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> l2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lastInArray</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;a&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;s&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 多泛型</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">let</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeTuple</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> &lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">Y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;(</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> T</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> Y</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> [x, y];</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> v1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> makeTuple</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;i&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div>`,31)]))}const o=s(l,[["render",n]]);export{y as __pageData,o as default};
